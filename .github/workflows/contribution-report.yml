name: Generate GitHub Contribution Report
on:
  schedule:
    - cron: "0 19 * * 5"  # Runs every Friday at 3 PM EST
  workflow_dispatch:  # Allows manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch GitHub Contributions (Last 7 Days)
        run: |
          USERNAME="AshleyHenry15"
          TOKEN="${{ secrets.WEEKLY }}"
          DATE=$(date +"%Y-%m-%d")  # Current date in YYYY-MM-DD format
          REPORT_FILE="reports/contributions-$DATE.md"
          REPORT="## 📝 Weekly Contribution Report ($DATE)\n\n"

          ORGS=("rstudio" "posit-dev")  # List of organizations
          DATE_LIMIT=$(date -d "7 days ago" --utc +"%Y-%m-%dT%H:%M:%SZ")

          for ORG in "${ORGS[@]}"; do
            # Fetch events (contributions) for the past week
            EVENTS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/users/$USERNAME/events?per_page=100")

            # Find unique repos where the user contributed
            ACTIVE_REPOS=$(echo "$EVENTS" | jq -r --arg DATE "$DATE_LIMIT" '[.[] | select(.created_at > $DATE) | .repo.name] | unique | .[]')

            if [[ -z "$ACTIVE_REPOS" ]]; then
              continue  # Skip if no activity
            fi

            REPORT+="## 🔹 Organization: [$ORG](https://github.com/$ORG)\n\n"

            for REPO in $ACTIVE_REPOS; do
              # Ensure the repo belongs to the current org
              if [[ "$REPO" != "$ORG/"* ]]; then
                continue
              fi

              REPORT+="### 📌 Repository: [$REPO](https://github.com/$REPO)\n\n"

              # Issues Opened
              ISSUES=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.issue.title)](\(.payload.issue.html_url))") | join("\n")')
              REPORT+="#### 🐞 Issues Opened:\n${ISSUES:-_No new issues_\n}\n\n"

              # PRs Opened
              PRS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.pull_request.title)](\(.payload.pull_request.html_url))") | join("\n")')
              REPORT+="#### 🔀 Pull Requests Opened:\n${PRS:-_No new PRs_\n}\n\n"

              # PR Reviews
              REVIEWS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestReviewEvent" and .repo.name==$REPO and .created_at > $DATE)] | map("- [Reviewed PR #\(.payload.pull_request.number)](\(.payload.review.html_url))") | join("\n")')
              REPORT+="#### 📝 PR Reviews:\n${REVIEWS:-_No new reviews_\n}\n\n"

              REPORT+="---\n"
            done
          done

          echo -e "$REPORT" > "$REPORT_FILE"

      - name: Commit and push the report to GitHub Pages (reports folder)
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.WEEKLY }}@github.com/AshleyHenry15/github-work.git
          git add reports/contributions-*.md
          git commit -m "Update contribution report for $DATE"
          git push origin main

          
name: Generate GitHub Contribution Report

on:
  schedule:
    - cron: "0 19 * * 5"  # Runs every Friday at 3 PM EST
  workflow_dispatch:  # Allows manual trigger via GitHub Actions UI

jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch GitHub Contributions (Last 7 Days)
        run: |
          USERNAME="AshleyHenry15"
          TOKEN="${{ secrets.WEEKLYCLASSIC }}"
          DATE=$(TZ="America/New_York" date +"%Y-%m-%d")  # Current date in EST
          REPORT_FILE="reports/contributions-$DATE.md"  # Save report in the 'reports' directory
          
          # Create reports directory if it doesn't exist
          mkdir -p reports
          
          # Check if the report already exists
          if [ -f "$REPORT_FILE" ]; then
            echo "Report file already exists. Overwriting: $REPORT_FILE"
          else
            echo "Creating new report file: $REPORT_FILE"
          fi
          
          REPORT="## 📝 Weekly Contribution Report ($DATE)\n\n"
          REPORT+="## 📊 Weekly Recap\n\n"
          REPORT+="| Repository | Issues Opened | Issues Closed | PRs Opened | Merged PRs | PR Reviews |\n"
          REPORT+="|------------|---------------|---------------|------------|------------|------------|\n"

          ORGS=("rstudio" "posit-dev")  # List of organizations
          DATE_LIMIT=$(TZ="America/New_York" date -d "7 days ago" --utc +"%Y-%m-%dT%H:%M:%SZ")
          
          for ORG in "${ORGS[@]}"; do
            # Fetch events (contributions) for the past week
            EVENTS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/users/$USERNAME/events?per_page=100")
            
            # Find unique repos where the user contributed
            ACTIVE_REPOS=$(echo "$EVENTS" | jq -r --arg DATE "$DATE_LIMIT" '[.[] | select(.created_at > $DATE) | .repo.name] | unique | .[]')
            if [[ -z "$ACTIVE_REPOS" ]]; then
              continue  # Skip if no activity
            fi
            REPORT+="## 🔹 Organization: [$ORG](https://github.com/$ORG)\n\n"
            for REPO in $ACTIVE_REPOS; do
              # Ensure the repo belongs to the current org
              if [[ "$REPO" != "$ORG/"* ]]; then
                continue
              fi
              REPORT+="### 📌 Repository: [$REPO](https://github.com/$REPO)\n\n"
              
              # Initialize counters for each item type
              OPENED_ISSUES=0
              CLOSED_ISSUES=0
              OPENED_PRS=0
              MERGED_PRS=0
              PR_REVIEWS=0
              
              # Issues Opened
              ISSUES=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)]')
              OPENED_ISSUES=$(echo "$ISSUES" | jq length)
              ISSUES_LIST=$(echo "$ISSUES" | jq -r 'map("- [\(.payload.issue.title)](\(.payload.issue.html_url))") | join("\n")')
              REPORT+="#### 🐞 Issues Opened:\n${ISSUES_LIST:-_No new issues_\n}\n\n"
              
              # Issues Closed
              CLOSED_ISSUES_LIST=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="closed" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.issue.title)](\(.payload.issue.html_url))") | join("\n")')
              CLOSED_ISSUES=$(echo "$CLOSED_ISSUES_LIST" | jq length)
              REPORT+="#### 🚪 Issues Closed:\n${CLOSED_ISSUES_LIST:-_No closed issues_\n}\n\n"

              # PRs Opened
              PRS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)]')
              OPENED_PRS=$(echo "$PRS" | jq length)
              PRS_LIST=$(echo "$PRS" | jq -r 'map("- [\(.payload.pull_request.title)](\(.payload.pull_request.html_url))") | join("\n")')
              REPORT+="#### 🔀 Pull Requests Opened:\n${PRS_LIST:-_No new PRs_\n}\n\n"
              
              # Merged PRs
              MERGED_PRS_LIST=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="closed" and .payload.pull_request.merged == true and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.pull_request.title)](\(.payload.pull_request.html_url))") | join("\n")')
              MERGED_PRS=$(echo "$MERGED_PRS_LIST" | jq length)
              REPORT+="#### 🔒 Merged Pull Requests:\n${MERGED_PRS_LIST:-_No merged PRs_\n}\n\n"
              
              # PR Reviews
              REVIEWS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestReviewEvent" and .repo.name==$REPO and .created_at > $DATE)]')
              PR_REVIEWS=$(echo "$REVIEWS" | jq length)
              REVIEWS_LIST=$(echo "$REVIEWS" | jq -r 'map("- [Reviewed PR #\(.payload.pull_request.number)](\(.payload.review.html_url))") | join("\n")')
              REPORT+="#### 📝 PR Reviews:\n${REVIEWS_LIST:-_No new reviews_\n}\n\n"

              # Add the counts to the Weekly Recap table
              REPORT+="| [$REPO](https://github.com/$REPO) | $OPENED_ISSUES | $CLOSED_ISSUES | $OPENED_PRS | $MERGED_PRS | $PR_REVIEWS |\n"
              REPORT+="|------------|---------------|---------------|------------|------------|------------|\n"
            done
          done
          
          # Force overwrite of the report file
          echo -e "$REPORT" > "$REPORT_FILE"
          
      - name: Update README with report link
        run: |
          DATE=$(TZ="America/New_York" date +"%Y-%m-%d")  # Current date in EST
          REPORT_FILE="reports/contributions-$DATE.md"
          
          # The link to the new report
          REPORT_LINK="[Contribution Report for $DATE](./$REPORT_FILE)"
          
          # Ensure the placeholder exists in the README
          if grep -q "<!-- ADD_LATEST_REPORT_LINK -->" README.md; then
            # Add the link to the README after the placeholder
            sed -i "s|<!-- ADD_LATEST_REPORT_LINK -->|<!-- ADD_LATEST_REPORT_LINK -->\n$REPORT_LINK|" README.md
          else
            echo "Placeholder <!-- ADD_LATEST_REPORT_LINK --> not found in README.md"
          fi
          # Display the README content for debugging purposes
          cat README.md
          
      - name: Commit and push the report and README update to GitHub
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.WEEKLYCLASSIC }}@github.com/AshleyHenry15/github-work.git
          
          # Ensure it adds reports in the 'reports' directory and README file
          git add reports/contributions-*.md README.md
          
          # Force commit and push even if there are no changes
          git commit -m "Update contribution report for $DATE and README" || echo "No changes to commit"
          git push origin main

name: Generate GitHub Contribution Report

on:
  schedule:
    - cron: "0 15 * * 5"  # Every Friday at 3pm EST (8pm UTC)
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: üì¶ Install dependencies
        run: pip install PyGithub pytz

      - name: üìù Generate contribution report
        env:
          GITHUB_TOKEN: ${{ secrets.WEEKLY_TOKEN }}
          REPOS: |
            posit-dev/product-doc-theme
            posit-dev/product-doc-styleguide
            posit-dev/positron-website
            rstudio/shiny-server-pro
            posit-hosted/vivid-docs
            posit-hosted/lucid-cloudyr-docs
            rstudio/quarto-tiers
            rstudio/helm
            posit-dev/rsconnect-python
            rstudio/chronicle
            rstudio/partnership-docs
            rstudio/package-manager
            posit-dev/connect
            rstudio/rstudio
            rstudio/rstudio-pro
            rstudio/docs.rstudio.com
            rstudio/launcher
            rstudio/solutions.posit.co
            posit-hosted/shinyappsio-docs
        run: |
          python <<EOF
          import os
          from datetime import datetime, timedelta
          from github import Github
          import pytz

          token = os.environ["GITHUB_TOKEN"]
          repos = os.environ["REPOS"].strip().splitlines()
          g = Github(token)

          user = "AshleyHenry15"
          utc = pytz.UTC
          since = datetime.utcnow().replace(tzinfo=utc) - timedelta(days=7)
          until = datetime.utcnow().replace(tzinfo=utc)
          timestamp = datetime.utcnow().strftime('%Y-%m-%d')
          output_path = f"reports/report-{timestamp}.md"

          os.makedirs("reports", exist_ok=True)
          with open(output_path, "w", encoding="utf-8") as f:
              f.write(f"# üìä GitHub Contribution Report ({timestamp})\\n\\n")

              for repo_name in repos:
                  repo = g.get_repo(repo_name)
                  print(f"üîç Checking {repo.full_name}...")
                  f.write(f"## üìò {repo.full_name}\\n")

                  # Pull Requests
                  f.write("### üîß Pull Requests\\n")
                  pr_found = False
                  for pr in repo.get_pulls(state="all", sort="created", direction="desc"):
                      if pr.created_at < since:
                          break
                      if pr.user.login == user:
                          f.write(f"- [#{pr.number}] {pr.title}\\n")
                          pr_found = True
                  if not pr_found:
                      f.write("_No PRs created in this repo._\\n")

                  # Issues
                  f.write("\\n### üêõ Issues\\n")
                  issue_found = False
                  for issue in repo.get_issues(state="all", since=since):
                      if issue.pull_request is None and issue.user.login == user:
                          f.write(f"- [#{issue.number}] {issue.title}\\n")
                          issue_found = True
                  if not issue_found:
                      f.write("_No issues created in this repo._\\n")

                  # Reviews
                  f.write("\\n### üëÄ PR Reviews\\n")
                  review_found = False
                  for pr in repo.get_pulls(state="all", sort="created", direction="desc"):
                      if pr.created_at < since:
                          break
                      try:
                          for review in pr.get_reviews():
                              if review.user.login == user and since <= review.submitted_at.replace(tzinfo=utc) <= until:
                                  f.write(f"- [#{pr.number}] {pr.title} (reviewed)\\n")
                                  review_found = True
                                  break  # One review per PR
                      except Exception as e:
                          print(f"‚ö†Ô∏è Failed to fetch reviews for PR #{pr.number} in {repo.full_name}: {e}")
                  if not review_found:
                      f.write("_No reviews in this repo._\\n")

                  f.write("\\n---\\n\\n")
          EOF

      - name: üì§ Commit and push report
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add reports/
          git commit -m "üóìÔ∏è Weekly contribution report"
          git push

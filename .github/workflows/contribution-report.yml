name: Generate GitHub Contribution Report

on:
  schedule:
    - cron: "0 15 * * 5"  # Every Friday at 3pm EST (8pm UTC)
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: üì¶ Install dependencies
        run: pip install PyGithub pytz

      - name: üìù Generate contribution report
        env:
          GITHUB_TOKEN: ${{ secrets.WEEKLY_TOKEN }}
          REPOS: |
            posit-dev/product-doc-theme
            posit-dev/product-doc-styleguide
            posit-dev/positron-website
            rstudio/shiny-server-pro
            posit-hosted/vivid-docs
            posit-hosted/lucid-cloudyr-docs
            rstudio/quarto-tiers
            rstudio/helm
            posit-dev/rsconnect-python
            rstudio/chronicle
            rstudio/partnership-docs
            rstudio/package-manager
            posit-dev/connect
            rstudio/rstudio
            rstudio/rstudio-pro
            rstudio/docs.rstudio.com
            rstudio/launcher
            rstudio/solutions.posit.co
            posit-hosted/shinyappsio-docs
        run: |
          python <<EOF
          import os
          from datetime import datetime, timedelta
          from github import Github
          import pytz

          token = os.environ["GITHUB_TOKEN"]
          repos = os.environ["REPOS"].strip().splitlines()
          g = Github(token)

          utc = pytz.UTC
          since = datetime.utcnow().replace(tzinfo=utc) - timedelta(days=7)
          until = datetime.utcnow().replace(tzinfo=utc)

          timestamp = datetime.utcnow().strftime('%Y-%m-%d')
          output_path = f"reports/report-{timestamp}.md"

          os.makedirs("reports", exist_ok=True)

          summary_data = []  # For the table

          with open(output_path, "w", encoding="utf-8") as f:
              f.write(f"# üìä GitHub Contribution Report ({timestamp})\n\n")

              # Build detailed content first and track counts
              detailed_report = ""

              for repo_name in repos:
                  repo = g.get_repo(repo_name)
                  user = g.get_user().login

                  detailed_report += f"## üìò {repo.full_name}\n"

                  prs = repo.get_pulls(state="all", sort="updated", direction="desc")
                  issues = repo.get_issues(state="all", since=since)
                  pulls = repo.get_pulls(state="all")
                  reviews_collected = []

                  pr_count = 0
                  issue_count = 0
                  review_count = 0

                  detailed_report += "### üîß Pull Requests\n"
                  for pr in prs:
                      if pr.user.login == user and since <= pr.created_at <= until:
                          detailed_report += f"- [#{pr.number}] {pr.title}\n"
                          pr_count += 1
                  if pr_count == 0:
                      detailed_report += "_No PRs created in this repo._\n"

                  detailed_report += "\n### üêõ Issues\n"
                  for issue in issues:
                      if issue.pull_request is None and issue.user.login == user:
                          detailed_report += f"- [#{issue.number}] {issue.title}\n"
                          issue_count += 1
                  if issue_count == 0:
                      detailed_report += "_No issues created in this repo._\n"

                  detailed_report += "\n### üëÄ PR Reviews\n"
                  for pr in pulls:
                      try:
                          for review in pr.get_reviews():
                              if review.user.login == user and since <= review.submitted_at <= until:
                                  if pr.html_url not in reviews_collected:
                                      detailed_report += f"- [#{pr.number}] {pr.title} (reviewed)\n"
                                      reviews_collected.append(pr.html_url)
                                      review_count += 1
                      except:
                          pass
                  if review_count == 0:
                      detailed_report += "_No reviews in this repo._\n"

                  detailed_report += "\n---\n\n"

                  summary_data.append({
                      "repo": repo.full_name,
                      "prs": pr_count,
                      "issues": issue_count,
                      "reviews": review_count
                  })

              # Build and write the summary table
              f.write("## üìã Summary Table\n\n")
              f.write("| üìò Repository | üîß PRs | üêõ Issues | üëÄ Reviews |\n")
              f.write("|--------------|--------|-----------|-------------|\n")
              for entry in summary_data:
                  f.write(f"| `{entry['repo']}` | {entry['prs']} | {entry['issues']} | {entry['reviews']} |\n")

              f.write("\n---\n\n")
              f.write(detailed_report)
          EOF

      - name: üì§ Commit and push report
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add reports/
          git commit -m "üóìÔ∏è Weekly contribution report"
          git push

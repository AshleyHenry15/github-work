name: Update README with report links

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual triggering
  workflow_run:
    workflows: ["Generate GitHub Contribution Report"]
    types:
      - completed

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure we get all history

      - name: Pull the latest changes
        run: git pull origin main  # Ensure we have the latest reports

      - name: Find all report files in the reports directory
        id: find_reports
        run: |
          # Find all .md files in the reports directory and sort by date
          report_files=$(find reports -type f -name "*.md" | sort -r)
          
          if [ -z "$report_files" ]; then
            echo "No report files found."
            exit 1  # Exit if no reports are found
          fi
          
          # Properly format and set REPORT_FILES as an environment variable
          echo "REPORT_FILES<<EOF" >> $GITHUB_ENV
          echo "$report_files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug - Show Report Files
        run: |
          echo "Detected report files:"
          echo "$REPORT_FILES"

      - name: Update README with the list of report links
        run: |
          # Define the marker to search for
          marker="<!-- insert list after this marker-->"

          # Read the README.md content
          readme_content=$(<README.md)

          # Extract the part before the marker
          before_marker=$(echo "$readme_content" | sed -n "1,/^$marker$/p")

          # Generate the list of report links
          report_list=""
          while IFS= read -r report; do
            # Extract the date from the filename (assuming the format is contributions-YYYY-MM-DD.md)
            report_date=$(basename "$report" | sed -E 's/contributions-([0-9]{4}-[0-9]{2}-[0-9]{2})\.md/\1/')
            report_list+="- [$report_date]($report)\n"
          done <<< "$REPORT_FILES"

          # Combine the content before the marker with the new list
          new_content="$before_marker\n$marker\n$report_list"

          # Write the updated content back to README.md
          echo -e "$new_content" > README.md

          # Stage the README.md file for commit
          git add README.md

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Commit the changes to README.md
          git commit -m "Update README with new report links" || echo "No changes to commit"
          
          # Push the changes back to the main branch
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
